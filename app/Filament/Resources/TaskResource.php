<?php

namespace App\Filament\Resources;

use App\Enums\TaskPriorityEnum;
use App\Enums\TaskStatusEnum;
use App\Filament\Resources\TaskResource\Pages;
use App\Filament\Resources\TaskResource\RelationManagers;
use App\Models\Task;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Pages\Page;
use Filament\Pages\SubNavigationPosition;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Enums\FiltersLayout;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class TaskResource extends Resource
{
    protected static ?string $model = Task::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function getNavigationBadge(): ?string
    {
        return Task::query()->with('tasksCategory', 'contracts')
        ->whereRelation('contracts', 'contracts.id', \Auth::user()->getActiveContractId())
            ->where('status', '<>', 'closed')
            ->count(); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Split::make([

                ])->columnSpanFull(),
                Forms\Components\Section::make('Task')
                    ->schema([
                        Forms\Components\Hidden::make('business_id')
                            ->default(\Auth::user()->getActiveBusinessId()),
                        Forms\Components\Select::make('status')
                            ->options(collect(TaskStatusEnum::cases())->pluck('name', 'value'))
                            ->required()
                            ->columns(1)
                            ->default('open'),
                        Forms\Components\Select::make('priority')
                            ->options(collect(TaskPriorityEnum::cases())->pluck('name', 'value'))
                            ->required()
                            ->columns(1)
                            ->default(3),
                        Forms\Components\Select::make('tasks_category_id')
                            ->searchable()
                            ->preload()
                            ->relationship('tasksCategory', 'name')
                            ->required()
                            ->columns(1),
                        Forms\Components\DatePicker::make('start')->columns(1)
                        ->default(now())->required(),
                        Forms\Components\Select::make('contracts')
                            ->label('Users')
                            ->relationship('contracts', 'id',
                                modifyQueryUsing: fn (Builder $query) => $query->with('user')->where('business_id', \Auth::user()->getActiveBusinessId()),
                            )
                            ->multiple()
                            ->preload()
                            ->getOptionLabelFromRecordUsing(fn (Model $record) => data_get($record, 'user.name'))
                        ,
                        Forms\Components\Select::make('end')
                            ->columns(1),
                        Forms\Components\TextInput::make('name')
                            ->required()
                            ->maxLength(255)
                            ->columnSpanFull(),
                        Forms\Components\RichEditor::make('description')
                            ->columnSpanFull()
                    ])->columns(3),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\IconColumn::make('priority')
                    ->sortable()
                    ->icon('heroicon-m-flag'),
                Tables\Columns\TextColumn::make('status')
                    ->badge()
                    ->sortable(),
                Tables\Columns\TextColumn::make('tasksCategory.name')
                    ->label('Category'),
                Tables\Columns\TextColumn::make('name')
                    ->searchable(),
                Tables\Columns\TextColumn::make('start')
                    ->date()
                    ->sortable(),
                Tables\Columns\TextColumn::make('end')
                    ->date()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\ViewAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->filters([
                Tables\Filters\Filter::make('not closed')
                    ->query(fn ($query) => $query->where('status', '<>', 'closed'))
                    ->toggle()
                    ->default()
            ])
            ->groups(['start'])
            ->modifyQueryUsing(fn ($query) => $query->with('tasksCategory', 'contracts')
                ->whereRelation('contracts', 'contracts.id', \Auth::user()->getActiveContractId())
                ->orderBy('priority'));
    }

    public static function getRelations(): array
    {
        return [
            RelationManagers\ActivitiesRelationManager::class
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListTasks::route('/'),
            'create' => Pages\CreateTask::route('/create'),
            'edit' => Pages\EditTask::route('/{record}/edit'),
            'view' => Pages\ViewTask::route('/{record}'),
        ];
    }
}
